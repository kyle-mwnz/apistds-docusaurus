"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8776],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),h=o,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(4137));const i={},a=void 0,s={unversionedId:"api-security/SecurityReference Architecture",id:"version-1.4.0/api-security/SecurityReference Architecture",title:"SecurityReference Architecture",description:"Security Reference Architecture",source:"@site/versioned_docs/version-1.4.0/api-security/6-SecurityReference Architecture.md",sourceDirName:"api-security",slug:"/api-security/SecurityReference Architecture",permalink:"/apistds-docusaurus/docs/api-security/SecurityReference Architecture",draft:!1,tags:[],version:"1.4.0",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Risks",permalink:"/apistds-docusaurus/docs/api-security/Risks"},next:{title:"BuildingSecure APIs",permalink:"/apistds-docusaurus/docs/api-security/BuildingSecure APIs"}},c={},l=[{value:"Security Reference Architecture",id:"security-reference-architecture",level:2},{value:"Actors and Security Functional Capabilities",id:"actors-and-security-functional-capabilities",level:3}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"security-reference-architecture"},"Security Reference Architecture"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This section describes an API Security Reference Architecture and its\ncomponent parts to inform the construction of an API security\nframework."),(0,o.kt)("p",{parentName:"blockquote"},"It is important to note that REST, gRPC, GraphQL and AsyncAPI are\ndifferent architectural models for building synchronous and\nasynchronous APIs that can leverage the Security Controls (e.g. OAuth\n2.0 and OpenID Connect) defined in this document; but they all have\ntheir own intrinsic security models (e.g. throttling consideration in\nGraphQL) that are not covered in this document.")),(0,o.kt)("h3",{id:"actors-and-security-functional-capabilities"},"Actors and Security Functional Capabilities"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Identity and Access Management defines the actors (users and devices)\nwho interact with system components that manage and expose APIs.\nFigure 13 shows a typical model of API components (support stack) and\nactors. The actors and components are described in Table and Table 8.")),(0,o.kt)("p",null,"[]{#_Toc74234865 .anchor}Figure 13: API Actors & Core Components"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The green areas highlight internal actors while the yellow areas\nhighlight the external actors."),(0,o.kt)("p",{parentName:"blockquote"},"The components defined remain valid no matter what API architecture\n(internal, cloud, hybrid) is implemented.")),(0,o.kt)("p",null,"+-----------+----------------------------------------------------------+\n| Actors    |                                                          |\n| and       |                                                          |\n| Devices   |                                                          |\n+===========+==========================================================+\n| External  | -   Customers - the public, other agencies and partners  |\n| Users     |     who use consuming applications to access resources   |\n|           |     via APIs.                                            |\n|           |                                                          |\n|           | -   External application developers who build software   |\n|           |     to access resources via APIs                         |\n+-----------+----------------------------------------------------------+\n| Devices   | -   PC Browsers running web applications                 |\n|           |                                                          |\n|           | -   Mobile Devices running apps                          |\n|           |                                                          |\n|           | -   Servers running systems with server-to server        |\n|           |     communications                                       |\n+-----------+----------------------------------------------------------+\n| Internal  | -   Internal API Developers who build APIs               |\n| Users     |                                                          |\n|           | -   Internal Application Developers who build software   |\n|           |     which accesses resources via APIs                    |\n|           |                                                          |\n|           | -   Business Owners responsible for the API product(s)   |\n|           |                                                          |\n|           | -   Security responsible for ensuring the APIs are       |\n|           |     secure                                               |\n+-----------+----------------------------------------------------------+"),(0,o.kt)("p",null,"[]{#_Toc74234992 .anchor}Table 8: Actors & Devices"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The core components of an API Security Framework (the development\nportal, manager and gateway) provide a grouping of functionality.\nThese functions can be delivered with discrete applications, or\nbespoke code development, via COTS products or through leveraging\nexisting devices that can be configured to provide these functions /\nservices. Note: some of the functionality may overlap or be combined\ninto one or more products depending on the vendor used."),(0,o.kt)("p",{parentName:"blockquote"},"The following lists the functions of a mature API delivery and\nsecurity framework for an agency that is working with the development\ncommunity. Together, these functions provide full support for the\napplication developer building and developing consuming applications\nthat will use the API(s) exposed by the agency."),(0,o.kt)("p",{parentName:"blockquote"},"Depending on the requirements of the agency, some of these functions\nmight not be required e.g. if the agency API exposed is purely for\npublic consumption and only allows consuming applications to read\ninformation, then only a solution for enforcing threat protection\n(i.e. Denial of Service) might be required, and this could be\ndelivered using an existing service protection capability.")),(0,o.kt)("p",null,'+-----------+----------------------------------------------------------+\n| Core      |                                                          |\n| C         |                                                          |\n| omponents |                                                          |\n+===========+==========================================================+\n| API       | The API Portal often provides the following functions    |\n| Portal    | for internal and external application developers:        |\n|           |                                                          |\n|           | -   Discovery of APIs                                    |\n|           |                                                          |\n|           | -   Analytics to monitor APIs                            |\n|           |                                                          |\n|           | -   Access to specifications and descriptions of APIs,   |\n|           |     including SLAs                                       |\n|           |                                                          |\n|           | -   Social network capability to share and publish ideas |\n|           |                                                          |\n|           | Also supports the development, build and test of         |\n|           | consuming applications.                                  |\n+-----------+----------------------------------------------------------+\n| API       | The API Manager functions cover:                         |\n| Manager   |                                                          |\n|           | -   Centralised API administration and governance for    |\n|           |     API catalogues                                       |\n|           |                                                          |\n|           | -   Management of registration and on-boarding processes |\n|           |     for communities of API developers                    |\n|           |                                                          |\n|           | -   Lifecycle Management of APIs                         |\n|           |                                                          |\n|           | -   Applying pre-defined security profiles               |\n|           |                                                          |\n|           | -   Security policy administration / definition          |\n|           |                                                          |\n|           | -   Policy evaluation                                    |\n+-----------+----------------------------------------------------------+\n| API       | The API Gateway capability can provide the following:    |\n| Gateway   |                                                          |\n|           | -   Act as the API proxy or the host acting as the       |\n|           |     primary point of access for exposed APIs             |\n|           |                                                          |\n|           | -   Enforce threat protection, throttling and quota      |\n|           |     management                                           |\n|           |                                                          |\n|           | -   Authorisation Services to control access to APIs     |\n|           |                                                          |\n|           | -   Authentication Services to ensure only permitted     |\n|           |     users (internal/external) have access to the API     |\n|           |                                                          |\n|           | -   Security Policy enforcement                          |\n|           |                                                          |\n|           | -   Monitoring and analytics for business and security   |\n|           |     analysts                                             |\n+-----------+----------------------------------------------------------+\n| Event     | The Event Broker (or \\"broker\\") is responsible for      |\n| Broker    | receiving events (aka messages) from publishers          |\n|           | (services) and delivering them to subscribers            |\n|           | (services), that is, the consumers who have registered   |\n|           | interest in events of that type.                         |\n|           |                                                          |\n|           | Brokers often store events until they are delivered,     |\n|           | which is what makes event driven architectures very      |\n|           | resilient to failures. Examples of brokers are RabbitMQ, |\n|           | Apache Kafka and Solace.                                 |\n|           |                                                          |\n|           | With the emergence of an AsyncAPI standard, event driven |\n|           | architectures are becoming more prevalent.               |\n+-----------+----------------------------------------------------------+\n| API       | OpenAPI (REST APIs) and AsyncAPI are API (message and    |\n| Docu      | event-based APIs) documentation specifications in a      |\n| mentation | machine-readable format                                  |\n|           |                                                          |\n|           | ',(0,o.kt)("a",{parentName:"p",href:"https://github.com/asyncapi/bindings"},"[https://github.com/asyncapi/bind                       |\n|           | ings]{.underline}")," |\n+-----------+----------------------------------------------------------+\n| API       | Business owners and security specialists need to be able |\n| M         | to monitor the use of APIs:                              |\n| onitoring |                                                          |\n| and       | -   Monitor uptake of API services                       |\n| Analytics |                                                          |\n|           | -   Define when to deprecate an old version              |\n|           |                                                          |\n|           | -   Profile usage for business                           |\n|           |                                                          |\n|           | -   Profile usage for security baselines                 |\n|           |                                                          |\n|           | -   Detect and respond to security events (SEIM)         |\n|           |                                                          |\n|           | This helps adapt to change in usage/demand.              |\n+-----------+----------------------------------------------------------+\n| C         | The credential stores are identity and key stores which  |\n| redential | are used to securely store:                              |\n| Stores    |                                                          |\n|           | -   Internal and external user objects, and possibly     |\n|           |     groups                                               |\n|           |                                                          |\n|           | -   API keys and secrets, certificates etc.              |\n|           |                                                          |\n|           | These stores are used by the API Gateway for             |\n|           | authorisation and authentication services                |\n+-----------+----------------------------------------------------------+"),(0,o.kt)("p",null,"[]{#_Toc74234993 .anchor}Table 9: Core Components"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The model can also be split, with the API support stack duplicated --\none set to support internal API usage and one set to support external\nuse:")),(0,o.kt)("p",null,"[]{#_Toc74234866 .anchor}Figure 14: Split API Support Stack"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Authentication, authorisation, confidentiality, integrity and\navailability can be applied across the components in the support\nstack, depending on component capabilities."),(0,o.kt)("p",{parentName:"blockquote"},"The actual configuration and location of the API functional\ncapabilities will vary depending on individual circumstances (e.g.\nsome capabilities may be internal, some may be in the cloud, where API\ndevelopment is outsourced then 'internal' functional stack may belong\nto the outsourcer etc.). Also, some components might not be required\nor can be developed in house.")))}d.isMDXComponent=!0}}]);